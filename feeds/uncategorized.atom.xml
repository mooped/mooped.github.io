<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mooplog - Uncategorized</title><link href="https://mooped.github.io/" rel="alternate"></link><link href="https://mooped.github.io/feeds/uncategorized.atom.xml" rel="self"></link><id>https://mooped.github.io/</id><updated>2013-12-12T21:21:00+00:00</updated><entry><title>STOMP STOMP STOMP STOMP</title><link href="https://mooped.github.io/stomp-stomp-stomp-stomp.html" rel="alternate"></link><published>2013-12-12T21:21:00+00:00</published><updated>2013-12-12T21:21:00+00:00</updated><author><name>moop</name></author><id>tag:mooped.github.io,2013-12-12:/stomp-stomp-stomp-stomp.html</id><summary type="html">&lt;p&gt;I've been a bit quiet on here for a while, and slacking on the PCB
milling experiments I've been meaning to do, though I have made some
progress on that front.&lt;/p&gt;
&lt;p&gt;Anyway, here's what I got sidetracked by building:&lt;/p&gt;
&lt;p&gt;This is a small budget hexapod, using 18 of the cheapest …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been a bit quiet on here for a while, and slacking on the PCB
milling experiments I've been meaning to do, though I have made some
progress on that front.&lt;/p&gt;
&lt;p&gt;Anyway, here's what I got sidetracked by building:&lt;/p&gt;
&lt;p&gt;This is a small budget hexapod, using 18 of the cheapest servos I could
find (£2.50 each). It uses a custom board with a power supply and 3
shift registers to control the servos. This in turn is controlled
through an SPI bus to a Minimus USB AVR board, pretending to be a USB to
serial device. The data sent over the serial line is interpreted as
servo IDs followed by the desired position of the servo.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;quot;attachment_506&amp;quot; align=&amp;quot;alignnone&amp;quot; width=&amp;quot;2592&amp;quot;]&lt;a class="reference external" href="http://www.moop.org.uk/index.php/2013/12/12/stomp-stomp-stomp-stomp/2013-12-11-21-54-59/"&gt;&lt;img alt="Mark 2 servo controller board" class="size-full wp-image-506" src="http://www.moop.org.uk/wp-content/uploads/2013/12/2013-12-11-21.54.59.jpg" style="width: 2592px; height: 1552px;" /&gt;&lt;/a&gt; Mark 2 servo controller board[/caption]&lt;/p&gt;
&lt;p&gt;The control software I wrote for the hexapod can run on any Linux
computer with a USB port. For dev I use a netbook but it also runs
nicely on a Raspberry Pi.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The original plan was to use the Raspberry Pi's SPI port to control
the servo board directly, unfortunately due to Linux's scheduling not
being particularly real time even in real time mode there was a lot of
timing jitter leading to real life servo jitter. Switching to the
Minimus meant having a very dedicated if much slower CPU generating
the pulses resulting in much smoother control of the servos.&lt;/div&gt;
&lt;div class="line"&gt;[caption id=&amp;quot;attachment_507&amp;quot; align=&amp;quot;alignnone&amp;quot;
width=&amp;quot;2592&amp;quot;]&lt;a class="reference external" href="http://www.moop.org.uk/index.php/2013/12/12/stomp-stomp-stomp-stomp/2013-10-23-19-15-36/"&gt;&lt;img alt="Hexapod" class="size-full wp-image-507" src="http://www.moop.org.uk/wp-content/uploads/2013/12/2013-10-23-19.15.36.jpg" style="width: 2592px; height: 1552px;" /&gt;&lt;/a&gt; Hexapod[/caption]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I'll hopefully post a full making of post on the hexapod soon, but for
now I just wanted to post a video of some stomping!&lt;/p&gt;
</content></entry><entry><title>The Minigun (A mini Super Gun)</title><link href="https://mooped.github.io/the-minigun-a-mini-super-gun.html" rel="alternate"></link><published>2013-11-24T14:54:00+00:00</published><updated>2013-11-24T14:54:00+00:00</updated><author><name>charlie</name></author><id>tag:mooped.github.io,2013-11-24:/the-minigun-a-mini-super-gun.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Guest post by Charlie again as he continues his quest to take over
Moop's blog with his super long posts:&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR?&lt;/h2&gt;
&lt;p&gt;Then here's a video instead...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://youtu.be/AGSSvxihYZs"&gt;http://youtu.be/AGSSvxihYZs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preamble"&gt;
&lt;h2&gt;Preamble&lt;/h2&gt;
&lt;p&gt;Recently I got into arcade boards. They can be found &lt;em&gt;reasonably&lt;/em&gt;
cheaply on eBay and as most use …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Guest post by Charlie again as he continues his quest to take over
Moop's blog with his super long posts:&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR?&lt;/h2&gt;
&lt;p&gt;Then here's a video instead...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://youtu.be/AGSSvxihYZs"&gt;http://youtu.be/AGSSvxihYZs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preamble"&gt;
&lt;h2&gt;Preamble&lt;/h2&gt;
&lt;p&gt;Recently I got into arcade boards. They can be found &lt;em&gt;reasonably&lt;/em&gt;
cheaply on eBay and as most use the standard JAMMA connection, setting
these up so you can play them on a TV at home is pretty straight
forward. Especially in Europe where SCART is still widely used and thus
almost all TVs have an RGB input.&lt;/p&gt;
&lt;p&gt;I built a very traditional supergun (device that allows you to play
JAMMA boards on a TV) last year. It was time consuming but it wasn't
particularly hard. It used a PC ATX power supply to supply the voltages
needed (-5V, +5V and 12V), audio/video output was via SCART and Neo Geo
AES pin compatible D-SUB 15 plugs for the controller inputs. Here's a
couple of pictures of my first effort...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_0782.jpg"&gt;&lt;img alt="IMG-0782" class="aligncenter size-full wp-image-487" src="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_0782.jpg" style="width: 816px; height: 612px;" /&gt;&lt;/a&gt; &lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_0787.jpg"&gt;&lt;img alt="IMG-0787" class="aligncenter size-full wp-image-483" src="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_0787.jpg" style="width: 816px; height: 612px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once I started getting more boards, I found that some bootlegs drew a
heck of a lot of current. So much so that the voltage drop over the half
a meter or so of wiring between the PC supply and the board was causing
the boards not to power up (due to the voltage drop across the wire). I
initially tried solving them by using some wider gauge wire in parallel
to feed the board. This worked but for some bootlegs I owned even this
wasn't good enough. I was reading as close to 5V as I could get at the
connector but measuring the voltage on distant parts of the board, the
voltage had dropped to sub 5V. I needed something better.&lt;/p&gt;
&lt;p&gt;I could have got a JAMMA power supply off eBay with a variable voltage
output. This was initially tempting but I just couldn't bring myself to
use one for safety reasons. On all the ones I saw the mains power was
just wired into screw terminals. This is fine as it'd be inside my super
gun's case. The thing that worried me was that the outputs were right
next to the mains screw terminal. The boards aren't in a cabinet like a
traditional arcade, they just lay on top. If the mains lead became loose
there is a possibility of the board becoming live. This may sound
surprising coming from the person that made his own bluetooth controlled
mains plug, it wasn't a risk I wanted to live with.&lt;/p&gt;
&lt;p&gt;So, I went looking for a variable DC/DC convertor that could transform a
lot of current without needing any active cooling. After some searching
I came up with
&lt;a class="reference external" href="http://docs-europe.electrocomponents.com/webdocs/0eec/0900766b80eec532.pdf"&gt;http://docs-europe.electrocomponents.com/webdocs/0eec/0900766b80eec532.pdf&lt;/a&gt;.
With this I could power the 5V line from the 12V output of the ATX power
supply and add a pot to adjust between around 5-6V so even my very power
hungry boards would be happy.&lt;/p&gt;
&lt;p&gt;With this done I felt I had a reasonable design. Then with Christmas
coming around I decided I could make another one for a friend as a
present. Building the first one, I wasn't really thinking about the time
it took as I built it and tweaked it over a couple of weeks. Even
knowing exactly how to build it now, it still took at least 10 hours to
actual do it. I made a few improvements along the way but it was a
tedious build due to the huge number of wires involved (&amp;gt;100
connections) and all the modifications needed to the case. Also, even
with a lot of salvaged parts (the ATX power supply, the SCART plug etc)
it also ended up being quite expensive at about £50. A lot of this was
due to the case which was quite hard to find as it needed to be tall
enough to fit an ATX power supply.&lt;/p&gt;
&lt;p&gt;With that out of the way I vowed never to make another supergun
again..... but of course I did. I just kept thinking I must be able to
make a better one. After trying the toner transfer method for the first
time, it got me thinking that I could do away with almost all the wires
by just making a supergun PCB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-design"&gt;
&lt;h2&gt;The design&lt;/h2&gt;
&lt;p&gt;Starting the design of a supergun PCB, I really wanted to make it as
compact as I possibly could while still making it easy and cheap to
assemble. One of the ways to do this was to leave out anything
superfluous. The JAMMA standard has various service switches but not all
need hooking up. COIN1/COIN2 are the coin inputs for adding credits.
These are useful to have on the controller so I wired these to the AES
controller's select button as this would otherwise not be used by JAMMA
boards. SERVICE on every board I own also just gives credits so I left
this out. TILT (for detecting people shaking the machine) is rarely
hooked up on superguns and I suspect does nothing interesting on 99% of
boards.&amp;nbsp;This only leaves TEST which is useful so this got it's own
microswitch on the board.&lt;/p&gt;
&lt;p&gt;Power was pretty easy. One reason to use an ATX power supply is that it
supplies the -5V that the JAMMA specification requires. However, looking
at my collection of arcade boards, one 1 (out of around 10) uses the -5V
line at all. They were normally just used for older types of audio
amplifiers (my one board which does use it works without it but just
without sound). I felt fairly comfortable with just leaving the -5V line
out all together. This decision along with using the same DC-DC
convertor from my original design means the supply only has to be 12V.
Many laptop power supplies are 12V, compact, cheap and can supply plenty
of current.&lt;/p&gt;
&lt;p&gt;The rest of the design mapped quite nicely to the PCB concept. PCB
mounted DSUB and SCART connectors are common. How to connect the JAMMA
edge connector was slightly more difficult. However, I noted that two
standard 1.6mm PCBs stacked on top of each other was almost exactly the
tag separation on the rear of the JAMMA connector. I could make a small
board that sat on top that could then run the signals for the top back
of the connector down onto the bottom board. Both boards I designed to
be single sided (for ease of creating at home) although because they sit
on top of each other it does effectively make it partially double sided.&lt;/p&gt;
&lt;p&gt;The design was quick to knock up in Eagle (maybe too quick as we'll see
later) but when I came to lay it out I hit my first snag. The free
version of Eagle is restricted by the size of the board it will let you
lay out. The longest dimension is 10cm. This wasn't long enough to
connect to every pin of the JAMMA connector. In fact, it was 3 pins
short. Luckily of these three, one is unconnected and the last two are
ground which exists on the other side of the connector anyway. It would
have been nice to connect these additional grounds but I didn't see much
harm in leaving them floating (assuming the grounds are connected on the
arcade board itself). So I designed the board to the Eagle limitations
and just added terminals at that end of the board if in the future I
wanted to wire the extra grounds in with some short jumper wires.&lt;/p&gt;
&lt;p&gt;Laying out the board itself was straight forward but time consuming as I
wanted to keep the layout single sided (with no jumpers) as it needed to
be simple to etch at home using hobbyist processes like the toner
transfer method. As such I needed to keep the traces fat too. This led
to another compromise. Because the traces had to be fat and single sided
fitting two controller ports was just too difficult. It's something I'd
like to fix in a future design if I was just going to get it
professionally manufactured via PCBcart or similar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building"&gt;
&lt;h2&gt;Building&lt;/h2&gt;
&lt;p&gt;Construction wasn't particularly interesting and was quite straight
forward. It was only my second attempt at the toner transfer method but
the traces were fat enough that I could fix most problems by hand with
just an etch resist pen. It wasn't perfect but I was fairly pleased with
the end result.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_18181.jpg"&gt;&lt;img alt="IMG-1818" class="aligncenter size-full wp-image-484" src="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_18181.jpg" style="width: 816px; height: 612px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Soldering the various connectors was quick and painless. The only
difficult bit was lining up the top and bottom boards to make the double
sided portion. Although because the via pads were quite big the
positioning wasn't that critical and any slight alignment problems could
be fixed by just adjusting some of the drilling locations.&lt;/p&gt;
&lt;p&gt;Once the components were all added, it was ready to test!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_1819.jpg"&gt;&lt;img alt="IMG-1819" class="aligncenter size-full wp-image-485" src="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_1819.jpg" style="width: 816px; height: 612px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Once everything was assembled I grabbed my male to male SCART cable and
immediately realised I had made a mistake. I knew I'd made a mistake as
I'd made the exact same one with my friend's supergun. Male to male
SCART cables don't map all the pins through one to one. Most do but some
are crossed over, so for example the audio output pins on one side go to
the audio input pins on the other. And the same for the video signal.
D'oh! So, out came the scalpel the offending traces were cut and
replaced by bodge wires.&lt;/p&gt;
&lt;p&gt;Tried again and this time the game sprang to life, everything was great
and then I noticed the colours were off. A quick check on the Neo Geo
test menu showed red and blue were reversed! Two mistakes on the same
board was quite embarrassing. I know exactly how it happened though as
when I tried to fix it, I made the exact same mistake. I initially wired
up the RGB pins on the SCART from memory and then checked them before
doing the board layout. I saw the mistake at this stage and thought I
had corrected it. Everything was connected via named labels in the
schematic so I just renamed the label on the pin (say from RED to BLUE).
Eagle asked &amp;quot;Do you want to connect RED to BLUE?&amp;quot;. Thinking this would
then cause all the pins to connect I said no but assumed the rename had
worked. Nope, I'd just done nothing. A second, &amp;quot;D'oh!&amp;quot;.&lt;/p&gt;
&lt;p&gt;So back out came the soldering iron and another set of bodge wires
causing the final board to be a messier than I would have liked but
everything I have thrown at it has worked so I'm quite pleased with the
results. Everything works as well as my big traditional super gun but
now it's in a very tiny portable package.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_1821.jpg"&gt;&lt;img alt="IMG-1821" class="aligncenter size-full wp-image-486" src="http://www.moop.org.uk/wp-content/uploads/2013/11/IMG_1821.jpg" style="width: 816px; height: 612px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make-your-own"&gt;
&lt;h2&gt;Make your own&lt;/h2&gt;
&lt;p&gt;I made this as my contribution to the super gun / JAMMA comunity so I've
fixed up my board layout (the swapped channel problem etc) and I'm
offering it as a download here:&amp;nbsp;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/11/Minigun-Final.zip"&gt;Minigun -
Final&lt;/a&gt;
(EAGLE file format). I hope people will build there own, make
improvements and share these improved versions with the community.&lt;/p&gt;
&lt;p&gt;Nb: The current design has the SCART socket mounts overlapping as the
connector I used had a different mounting to the stock one in EAGLE.
Also the single top layer trace is the 5V line to the controller port. I
don't use this in my home-brew controllers so I left it unconnected but
if you did want to use AES controllers you may have to solder a jumper
wire between these points.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Lightwave RF Mood Controller Hack</title><link href="https://mooped.github.io/lightwaverfmoodcontrollerhack.html" rel="alternate"></link><published>2013-08-25T21:46:00+01:00</published><updated>2013-08-25T21:46:00+01:00</updated><author><name>charlie</name></author><id>tag:mooped.github.io,2013-08-25:/lightwaverfmoodcontrollerhack.html</id><summary type="html">&lt;p&gt;It's me, Charlie again, continuing with my scheme to take over Moop's
blog with nothing but home automation articles.&lt;/p&gt;
&lt;p&gt;Readers of this blog will know that I've been playing around with
LightwaveRF's home automation stuff a lot recently. Mainly setting up
voice control systems for it. One thing that irked …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's me, Charlie again, continuing with my scheme to take over Moop's
blog with nothing but home automation articles.&lt;/p&gt;
&lt;p&gt;Readers of this blog will know that I've been playing around with
LightwaveRF's home automation stuff a lot recently. Mainly setting up
voice control systems for it. One thing that irked me though was that to
control the devices across the network requires a £65 ($100) box called
the WiFi link
(&lt;a class="reference external" href="http://www.lightwaverf.co.uk/LighwaveRF-Connect-Home-Automation-Smartphone-Wifi-Link-White.html"&gt;http://www.lightwaverf.co.uk/LighwaveRF-Connect-Home-Automation-Smartphone-Wifi-Link-White.html&lt;/a&gt;).
This seemed a bit much to me but I shelled out the money as there didn't
seem to be any option. However, when someone at work started asking
about it, it got me thinking if there could be a cheaper way. Maybe it'd
be possible to hack the much cheaper mood controller
(&lt;a class="reference external" href="http://www.lightwaverf.co.uk/LightwaveRF-Connect-Home-Automation-Hand-Held-Remote-Control-Black.html"&gt;http://www.lightwaverf.co.uk/LightwaveRF-Connect-Home-Automation-Hand-Held-Remote-Control-Black.html&lt;/a&gt;)
to be controlled from a Raspberry Pi (or any cheap microcontroller)
directly.&lt;/p&gt;
&lt;p&gt;So, I started by cracking open the controller I got free in a 3 bulb
bundle. At first there didn't seem to be any screws at all. Peeling back
the label revealed one though. Even with the screw removed however, it
remained stubbornly in one piece. So, I got my spludger out and worked
it into the gap of the case. Working my way around I found tabs that
needed releasing.&lt;/p&gt;
&lt;p&gt;Once inside, I got my first surprise. There's more buttons on the
circuit board then there are on the front of the device. I didn't try
these buttons but I am curious to know what they are there for.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/08/6Buttons.jpg"&gt;&lt;img alt="Six Buttons" class="aligncenter size-full wp-image-363" src="http://www.moop.org.uk/wp-content/uploads/2013/08/6Buttons.jpg" style="width: 960px; height: 1280px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next nice surprise was that the switch electronics were very simple for
the buttons I wanted to hack (the on/off and device select slider). All
three controls clearly weren't multiplexed as they all shared the
battery's ground. This made the hack a heck of a lot easier. Next up was
checking with a multimeter that the other terminals of the buttons were
pulled high. Checking the on and off buttons showed 3V, which is close
enough to drive from the Pi's 3.3V logic. The slider however, showed no
voltage. Checking on the oscilloscope revealed that the slider switch
was only powered for a split second when either the on or off button was
pressed, presumably to save power. The first three pads do this but the
fourth is never powered. I assume this pad isn't actually used as if the
switch isn't in the first three positions, then it logically must be on
the fourth pad.&lt;/p&gt;
&lt;p&gt;With everything working as expected I soldered on my connections and
connected these to a header.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/08/AllDone.jpg"&gt;&lt;img alt="Controller With Header" class="aligncenter size-full wp-image-364" src="http://www.moop.org.uk/wp-content/uploads/2013/08/AllDone.jpg" style="width: 960px; height: 1280px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The program to actually interface with the device was very easy. I
originally planned to use the tri state logic function to simulate the
button being open. This didn't seem to work however so in the end I just
used a logic high output. This is a bit wrong as the Pi outputs 3.3V
logic which is higher than the potential of the controller but doesn't
seem to cause problems. To simulate the button being pressed, a logic
low output is generated from the Pi. For the slider, I just need to pull
one of the three lines low or keep them all high to select device 4.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/08/Connected.jpg"&gt;&lt;img alt="Controller Connected to Pi" class="aligncenter size-full wp-image-365" src="http://www.moop.org.uk/wp-content/uploads/2013/08/Connected.jpg" style="width: 960px; height: 1280px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Naturally I made a video to go along with this hack...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://youtu.be/qLB7Lr4YQ_4"&gt;http://youtu.be/qLB7Lr4YQ_4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As always the source for the Pi program can be downloaded
at&amp;nbsp;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/08/remote.c"&gt;Lightwave Hack
Source&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Siri, control my lights</title><link href="https://mooped.github.io/siri-control-my-lights.html" rel="alternate"></link><published>2013-08-15T20:08:00+01:00</published><updated>2013-08-15T20:08:00+01:00</updated><author><name>charlie</name></author><id>tag:mooped.github.io,2013-08-15:/siri-control-my-lights.html</id><summary type="html">&lt;p&gt;Once again, it's not moop but Charlie, so we're talking home automation
instead of planes.&lt;/p&gt;
&lt;p&gt;My last video on home automation turned out to be surprisingly popular!
So, to celebrate I've done a quick follow up on the same idea. One thing
people commented on was that I should have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once again, it's not moop but Charlie, so we're talking home automation
instead of planes.&lt;/p&gt;
&lt;p&gt;My last video on home automation turned out to be surprisingly popular!
So, to celebrate I've done a quick follow up on the same idea. One thing
people commented on was that I should have used SiriProxy. I had
considered this when writing Jeeves
(&lt;a class="reference external" href="http://www.youtube.com/watch?v=gZkwvSX0_Os"&gt;http://www.youtube.com/watch?v=gZkwvSX0_Os&lt;/a&gt;). I felt it wasn't quite as
cool as having a device that listens all the time though. However,
SiriProxy doesn't seem to require a huge amount of processor time so can
run happily next to Jeeves even on a Raspberry Pi, so I thought I'd give
it a go.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://youtu.be/Z7gtugR2umI"&gt;http://youtu.be/Z7gtugR2umI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Setting up was amazingly easy. I basically followed the instructions
verbatim from the main SiriProxy page
(&lt;a class="reference external" href="https://github.com/plamoni/SiriProxy"&gt;https://github.com/plamoni/SiriProxy&lt;/a&gt;). There's a lot of complicated
guides for old versions of SiriProxy but the latest version is quite
simple to setup, so just follow the instructions from the main page.&lt;/p&gt;
&lt;p&gt;The only thing I did differently to the instructions was that I had to
copy my .siriproxy directory from my user directory to /root/.siriproxy.
This is probably because when I generated the certificates, I wasn't
root. You should be able to run SiriProxy as an unprivileged user but I
didn't get that to work. It's only on the Pi so, I don't have any
reservations about running SiriProxy as root anyway, so I just went with
it.&lt;/p&gt;
&lt;p&gt;Once the Pi was set up and running, all that was left was to set up my
phone. This required e-mailing the generated certificate and changing
the WiFi settings so that the DNS server pointed at the Pi.&lt;/p&gt;
&lt;p&gt;With that working, next was the fun part of actually making a plugin for
SiriProxy so it would do my bidding. There's already a LightwaveRF
plugin but what's the fun of being like everyone else! Naturally I wrote
my own. It's might be worse that the existing plugin, I didn't check
before writing my own version.&lt;/p&gt;
&lt;p&gt;The first hurdle to overcome was that the plugins need writing in Ruby.
I'd never even seen Ruby code until I wrote the plugin so I probably
didn't do things in the most efficient way but it was easy to get
something working.&lt;/p&gt;
&lt;p&gt;The main bulk of the plugin consists of these clauses...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
listen_for /some regex/ do |variables,to,store,matches|
&amp;nbsp; say &amp;quot;Hey I recognised that&amp;quot;
&amp;nbsp; request_completed
end
&lt;/pre&gt;
&lt;p&gt;Adding the lightwaveRF UDP protocol was easy from Ruby. First a socket
is created and the host/port set up with...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
s = UDPSocket.new
port = 9760
host = &amp;quot;192.168.0.10&amp;quot;
&lt;/pre&gt;
&lt;p&gt;To turn on a device can then be done with only one line...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
s.send(&amp;quot;000,!R1D1F1|Siri|On&amp;quot;, 0, host, port)
&lt;/pre&gt;
&lt;p&gt;Each room contains a list of sockets that it has. When saying &amp;quot;There is
a desklamp in the left socket&amp;quot;, it first matches via a regular
expression and extracts the two important bits, &amp;quot;desklamp&amp;quot; and &amp;quot;left
socket&amp;quot;. Next it verifies that &amp;quot;left socket&amp;quot; is a socket it knows about.
If it is, then it inserts a new entry into the &amp;quot;items&amp;quot; hash map linking
&amp;quot;desklamp&amp;quot; to the left socket.&lt;/p&gt;
&lt;p&gt;When you say &amp;quot;Turn on desklamp&amp;quot;, the word &amp;quot;desklamp&amp;quot; is looked up in the
items hash map. If it finds a match then it sends the required command
to the socket it was registered with. If it doesn't find anything in the
map then it will check for a socket called &amp;quot;desklamp&amp;quot;. Being a lazy
programmer, the lights use this trick as they are implemented as just
another socket. I could say &amp;quot;There is a banana in the lights&amp;quot; and I
would be able to turn on my lights by saying &amp;quot;Switch on banana&amp;quot;. That
sort of bug, I don't mind letting slip through though as it's a remote
possibility anyone would try.&lt;/p&gt;
&lt;p&gt;I think that pretty much covers it. I hope someone finds it fun and has
a go at implementing their own system.&lt;/p&gt;
&lt;p&gt;If you want to look at my code, you can get it by clicking
this&amp;nbsp;&lt;a class="reference external" href="http://www.moop.org.uk/wp-content/uploads/2013/08/siriproxy-lightwave.zip"&gt;siriproxy-lightwave&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Space saving wall art</title><link href="https://mooped.github.io/space-saving-wall-art.html" rel="alternate"></link><published>2013-02-02T22:44:00+00:00</published><updated>2013-02-02T22:44:00+00:00</updated><author><name>moop</name></author><id>tag:mooped.github.io,2013-02-02:/space-saving-wall-art.html</id><summary type="html">&lt;p&gt;I seem to have too many model planes nowadays, and storage was fast
becoming a problem. During a bout of boredom, I dug up some screws and
hooks and attached them to the wall above my desk. Now they look cool,
and I have loads of extra space!&lt;/p&gt;
&lt;p&gt;[caption id …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I seem to have too many model planes nowadays, and storage was fast
becoming a problem. During a bout of boredom, I dug up some screws and
hooks and attached them to the wall above my desk. Now they look cool,
and I have loads of extra space!&lt;/p&gt;
&lt;p&gt;[caption id=&amp;quot;attachment_130&amp;quot; align=&amp;quot;alignnone&amp;quot; width=&amp;quot;2592&amp;quot;]&lt;a class="reference external" href="http://www.moop.org.uk/index.php/2013/02/02/space-saving-wall-art/2013-01-26-12-23-38/"&gt;&lt;img alt="Space saving wall art" class="size-full wp-image-130" src="http://www.moop.org.uk/wp-content/uploads/2013/02/2013-01-26-12.23.38.jpg" style="width: 2592px; height: 1552px;" /&gt;&lt;/a&gt; Space saving wall art[/caption]&lt;/p&gt;
</content></entry></feed>